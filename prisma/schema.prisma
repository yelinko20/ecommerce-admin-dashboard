// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id             String    @id @default(uuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
}

model Account {
  id                String  @id @default(uuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])
  userId            String

  @@index([userId])
}

model Product {
  id         String      @id @default(uuid())
  categoryId String
  category   Category    @relation(fields: [categoryId], references: [id])
  name       String
  price      Decimal
  isArchived Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  images     Image[]
  colorId    String
  color      Color       @relation(fields: [colorId], references: [id])
  orderItems OrderItem[]

  @@index([categoryId])
  @@index([colorId])
}

model Color {
  id         String    @id @default(uuid())
  colorName  String
  colorValue String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  products   Product[]
}

model Category {
  id           String    @id @default(uuid())
  categoryName String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  products     Product[]
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  phone      String
  address    String
  isPaid     Boolean
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
